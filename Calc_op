package trabalho3;

public class Calc_op {
	
	 public static double compute(final String str) {
	        return new Object() {
	            int pos = -1, ch;

	            void nextChar() {
	                ch = (++pos < str.length()) ? str.charAt(pos) : -1;
	            }

	            boolean eat(int charToEat) {
	                while (ch == ' ') {
	                    nextChar();
	                }
	                if (ch == charToEat) {
	                    nextChar();
	                    return true;
	                }
	                return false;
	            }

	            double parse() {
	                nextChar();
	                double x = parseExpression();
	                if (pos < str.length()) {
	                    throw new RuntimeException("Unexpected: " + (char) ch);
	                }
	                return x;
	            }

	            double parseExpression() {
	                double x = parseTerm();
	                for (; ; ) {
	                    if (eat('+')) { //addition
	                        x += parseTerm();
	                    } else if (eat('-')) { //subtraction
	                        x -= parseTerm();
	                    } else {
	                        return x;
	                    }
	                }
	            }

	            double parseTerm() {
	                double x = parsePow();
	                for (; ; ) {
	                    if (eat('ร')) { //multiplication
	                        x *= parsePow();
	                    } else if (eat('รท')) { //division
	                        x /= parsePow();
	                    } else {
	                        return x;
	                    }
	                }
	            }

	            double parsePow() {
	                double x = parseFactor();
	                for (; ; ) {
	                    if (eat('^')) {
	                        x = Math.pow(x, parseFactor());
	                    } else {
	                        return x;
	                    }
	                }
	            }


	            double parseFactor() {
	                if (eat('+')) { //unary plus
	                    return parsePow(); //unary plus
	                }
	                if (eat('-')) { //unary minus
	                    return -parsePow();
	                }
	                if (eat('e')) {
	                	return Math.E;
	                }
	                double x;
	                int startPos = this.pos;
	                if (eat('(')) { //parentheses
	                    x = parseExpression();
	                    eat(')');
	                } else if ((ch >= '0' && ch <= '9') || ch == '.') { //numbers
	                    while ((ch >= '0' && ch <= '9') || ch == '.') {
	                        nextChar();
	                    }
	                    x = Double.parseDouble(str.substring(startPos, this.pos));
	                } else if (ch >= 'a' && ch <= 'z' || ch == '!' || ch == '%') { //functions
	                    while (ch >= 'a' && ch <= 'z' || ch == '!' || ch == '%') {
	                        nextChar();
	                    }
	                    String func = str.substring(startPos, this.pos);
	                    x = parseFactor();
	                    if (func.equals("sqrt")) {
	                        x = Math.sqrt(x);
	                    } else if (func.equals("cbrt")) {
	                    	x = Math.cbrt(x);
	                    } else if (func.equals("log")) {
	                        x = Math.log10(x);
	                    } else if (func.equals("ln")) {
	                        x = Math.log(x);
	                    } else if (func.equals("%")) {
	                    	x = x / 100;
	                    } else if (func.equals("!")) {
	                        int fact = 1;
	                        double number = x;
	                        for (int i = 1; i <= number; i++) {
	                            fact *= i;
	                        }
	                        x = fact;
	                    } else {
	                        throw new RuntimeException("Unknown function: " + func);
	                    }
	                } else {
	                    throw new RuntimeException("Unexpected: " + (char) ch);
	                }
	                return x;
	            }
	        }.parse();
	    }
}
